<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sefoy - AI Chat</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* CSS කොටස */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0;
        }
        
        .chat-container {
            width: 100%;
            height: 100vh;
            background-color: rgba(255, 255, 255, 0.95);
            display: flex;
            flex-direction: column;
            position: relative;
            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.2);
        }
        
        .header {
            background: linear-gradient(to right, #4b6cb7, #182848);
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .header p {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .chat-area {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            background-color: #f9f9f9;
        }
        
        .welcome-message {
            background-color: #f1f3f6;
            padding: 15px;
            border-radius: 18px;
            margin-bottom: 20px;
            text-align: center;
            color: #4b6cb7;
            font-weight: 500;
            align-self: center;
            max-width: 80%;
        }
        
        .message {
            max-width: 80%;
            padding: 12px 16px;
            margin-bottom: 15px;
            border-radius: 18px;
            line-height: 1.4;
            position: relative;
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            background-color: #4b6cb7;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }
        
        .bot-message {
            background-color: #e8ebf0;
            color: #333;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }
        
        .input-area {
            padding: 15px;
            background-color: #f1f3f6;
            display: flex;
            align-items: center;
            gap: 10px;
            border-top: 1px solid #ddd;
        }
        
        .attachment-btn {
            background-color: #4b6cb7;
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            font-size: 20px;
            flex-shrink: 0;
            transition: all 0.2s;
        }
        
        .attachment-btn:hover {
            background-color: #3a5999;
        }
        
        .text-input {
            flex: 1;
            background-color: white;
            border-radius: 25px;
            padding: 0 20px;
            height: 50px;
            display: flex;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .text-input input {
            width: 100%;
            border: none;
            outline: none;
            font-size: 16px;
            padding: 5px 0;
        }
        
        .send-btn {
            background-color: #4b6cb7;
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            font-size: 20px;
            transition: all 0.2s;
            flex-shrink: 0;
        }
        
        .send-btn:hover {
            background-color: #3a5999;
        }
        
        .send-btn:active {
            transform: scale(0.95);
        }
        
        .timestamp {
            font-size: 10px;
            margin-top: 5px;
            opacity: 0.7;
            text-align: right;
        }
        
        .typing-indicator {
            background-color: #e8ebf0;
            padding: 12px 16px;
            border-radius: 18px;
            align-self: flex-start;
            margin-bottom: 15px;
            display: none;
            border-bottom-left-radius: 5px;
        }
        
        .typing-indicator span {
            height: 8px;
            width: 8px;
            float: left;
            margin: 0 1px;
            background-color: #9E9EA1;
            display: block;
            border-radius: 50%;
            opacity: 0.4;
        }
        
        .typing-indicator span:nth-of-type(1) {
            animation: typing 1s infinite;
        }
        
        .typing-indicator span:nth-of-type(2) {
            animation: typing 1s 0.33s infinite;
        }
        
        .typing-indicator span:nth-of-type(3) {
            animation: typing 1s 0.66s infinite;
        }
        
        @keyframes typing {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-5px);
            }
        }
        
        .api-status {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 12px;
            padding: 3px 8px;
            border-radius: 10px;
            background-color: #4caf50;
            color: white;
        }
        
        @media (max-width: 480px) {
            .header {
                padding: 15px;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="header">
            <h1>Sefoy</h1>
            <p>AI-Powered Chat Experience</p>
            <div class="api-status" id="apiStatus">Connected</div>
        </div>
        
        <div class="chat-area" id="chatArea">
            <div class="welcome-message">
                Hello Customer! How can I help you today?
            </div>
            
            <div class="typing-indicator" id="typingIndicator">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        
        <div class="input-area">
            <div class="attachment-btn" id="attachmentButton">
                <i class="fas fa-image"></i>
            </div>
            <div class="text-input">
                <input type="text" id="messageInput" placeholder="Type a message...">
            </div>
            <div class="send-btn" id="sendButton">
                <i class="fas fa-paper-plane"></i>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatArea = document.getElementById('chatArea');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const attachmentButton = document.getElementById('attachmentButton');
            const typingIndicator = document.getElementById('typingIndicator');
            
            // ඔබ ලබා දුන් API යතුර සහ model එක මෙහි ඇතුළත් කර ඇත.
            const API_KEY = 'gsk_vk4EY3o4pHb3FYNPY43HpOzomu2YlohSbj';
            const API_URL = 'https://ai.groq.com/openai/v1/chat/completions';
            const MODEL_NAME = 'meta-llama/llama-4-scout-17b-16e-instruct';

            // සංවාද ඉතිහාසය සඳහා Array එක.
            const messages = [
                {
                    role: 'system',
                    content: 'You are a helpful assistant named Sefoy. Your goal is to help customers with their queries.'
                },
            ];

            function addMessage(text, isUser) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.classList.add(isUser ? 'user-message' : 'bot-message');
                
                const messageText = document.createElement('div');
                messageText.textContent = text;
                messageDiv.appendChild(messageText);
                
                const timestamp = document.createElement('div');
                timestamp.classList.add('timestamp');
                const now = new Date();
                timestamp.textContent = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
                messageDiv.appendChild(timestamp);
                
                chatArea.insertBefore(messageDiv, typingIndicator);
                chatArea.scrollTop = chatArea.scrollHeight;
            }
            
            function showTypingIndicator() {
                typingIndicator.style.display = 'block';
                chatArea.scrollTop = chatArea.scrollHeight;
            }
            
            function hideTypingIndicator() {
                typingIndicator.style.display = 'none';
            }

            async function getGroqResponse() {
                try {
                    const response = await fetch(API_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${API_KEY}`
                        },
                        body: JSON.stringify({
                            model: MODEL_NAME,
                            messages: messages,
                            temperature: 0.7
                        })
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error('API Error:', errorData.error.message);
                        throw new Error(`API Error: ${response.status} - ${errorData.error.message}`);
                    }
                    
                    const data = await response.json();
                    return data.choices[0].message.content;
                } catch (error) {
                    console.error('Error fetching from Groq API:', error);
                    addMessage("I'm sorry, I'm having trouble connecting to the server. Please try again later.", false);
                    return null;
                }
            }

            async function sendMessage() {
                const userMessage = messageInput.value.trim();
                if (userMessage === '') {
                    return;
                }
                
                addMessage(userMessage, true);
                messageInput.value = '';
                
                messages.push({
                    role: 'user',
                    content: userMessage
                });

                showTypingIndicator();
                
                try {
                    const botResponse = await getGroqResponse();
                    hideTypingIndicator();

                    if (botResponse) {
                        addMessage(botResponse, false);
                        messages.push({
                            role: 'assistant',
                            content: botResponse
                        });
                    }
                } catch (error) {
                    hideTypingIndicator();
                }
            }
            
            sendButton.addEventListener('click', sendMessage);
            
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            attachmentButton.addEventListener('click', function() {
                alert("This feature is not implemented yet.");
            });

            setTimeout(() => {
                addMessage("Welcome to Sefoy! I'm connected to Groq and ready to help.", false);
            }, 1000);
        });
    </script>
</body>
</html>
